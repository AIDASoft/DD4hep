/**

\mainpage dd4hep - Main page

<A href="#UsefulLinks">Useful links</A>

\section MAIN dd4hep - A Detector Description Toolkit for High Energy Physics Experiments

\section INTRO Introduction
The development of a coherent set of software tools for the description of 
High Energy Physics detectors from a single source of information has been
on the agenda of many experiments for decades.
Providing appropriate and consistent detector views to simulation, 
reconstruction and analysis applications from a single information source
is crucial for the success of the experiments.
Detector description in general includes not only the geometry and the 
materials used in the apparatus, but all parameters describing e.g. the 
detection techniques, constants required by alignment and calibration, 
description of the readout structures, conditions data, etc. 

The design of the dd4hep toolkit
is shaped on the experience of detector description 
systems, which were implemented for the LHC experiments, in particular 
the LHCb experiment,
as well as the lessons learnt from other
implementations of geometry description tools developed for 
the Linear Collider.
Designing a coherent set of tools, with most of the basic components 
already existing in one form or another, is an opportunity for getting 
the best of all existing solutions. 
dd4hep aims to widely reuse used existing software components, in particular
the ROOT geometry, part of the ROOT project, a tool for 
building, browsing, navigating and visualizing detector geometries. The
code is designed to optimize particle transport through complex 
structures and works standalone with respect to any Monte-Carlo 
simulation engine. The ROOT geometry package provides
sophisticated 3D visualization functionality, which is ideal for building 
detector and event displays. The second component is 
the Geant4 simulation toolkit, which is used to 
simulate the detector response from particle collisions in complex designs.
In dd4hep the geometrical
representation provided by ROOT is the main source of information.
In addition dd4hep provides the automatic conversions to other geometrical 
representations, such as Geant4, and the convenient usage of these 
components without the reinvention of the existing functionality.

\section SCOPE Project Scope and Requirements

The detector description should fully describe and qualify 
the detection apparatus and must expose access to all information
required to interpret event data recorded from particle collisions.
Experience from the LHC experiments has shown that a generalized
view, not limited only to geometry, is very beneficial in order to obtain 
a coherent set of tools for the interpretation of collision data.
This is particularly important in later stages of the experiment's life cycle,
when a valid set of detector data must be used to analyze real or simulated 
detector response from particle collisions. An example would be an alignment 
application, where time dependent precise detector positions are matched 
with the detector geometry.


The following main requirements influenced the design of the toolkit:

-   <b>Full Detector Description.</b> The toolkit should be able to 
    manage the data describing the detector geometry, the materials used 
    when building the structures, 
    visualization attributes, detector readout information, alignment,
    calibration and environmental parameters - all that is
    necessary to interpret event data recorded from particle collisions.
-   <b>The Full Experiment Life Cycle</b> should be supported.
    The toolkit should support the development of the detector concepts, 
    detector optimizations, 
    construction and later operation of the detector.
    The transition from one phase to the next should be simple and not require 
    new developments. The initial phases are characterized by very $ideal$
    detector descriptions, i.e. only very few parameters are sufficient 
    to describe new 
    detector designs. Once operational, the detector will be different 
    from the ideal detector, and each part of the detector will have 
    to have its own specific parameters and conditions, 
    which are exposed by the toolkit.
-   <b>One single source of detector information</b> must be sufficient
    to perform all data processing applications such as simulation, 
    reconstruction, online trigger and data analysis. 
    This ensures that all applications see a coherent description.
    In the past attempts by experiments to re-synchronize parallel
    detector descriptions were always problematic.
    Consequently, the detector description is the union of the information 
    needed by all applications, though the level of detail may be selectable.
-   <b>Ease of Use</b> influenced both
    the design and the im\-ple\-men\-tation. The definition of sub\-detectors,
    their geometrical description and the access to con\-ditions and alignment 
    data should follow a minimalistic, simple and intuitive interface.
    Hence, the of the developer using the toolkit is focused on specifics of 
    the detector design and not on technicalities handled transparently by 
    the toolkit.
.

<img src="../LaTex/DD4hep_big_picture.png" height="400"/>
<b>The components of the dd4hep detector geometry toolkit.</b>

\section DESIGN Toolkit Design

The Figure above shows the architecture 
of the main components of the toolkit and their interfaces 
to the end-user applications, namely the simulation, reconstruction, 
alignment and visualization. 
The central element of the toolkit is the so-called generic detector 
description model. This is an in-memory model, i.e., a set of C++ objects 
holding the data describing the geometry and other information of 
the detector. The rest of the toolkit consists of tools and interfaces 
to input or output information from this generic detector model. 
The model and its components will be described in subsequence sections.

\section COMPACT The Compact Detector Description

Inspired from the work of the linear collider detector 
simulation, the compact detector description is used
to define an ideal detector as typically used during 
the conceptual design phase of an experiment. 
The compact description in its minimalistic form is probably not going to 
be adequate later in the detector life cycle and
is likely to be replaced or refined when a more realistic detector 
with deviations from the ideal would be needed by the experiment.

In the compact description the detector is parametrized in minimalistic terms
with user provided parameters in XML.
XML is an open format, the dd4hep parsers do not validate against a fix schema
and hence allow to easily introduce new elements and attributes to describe 
detectors. This feature minimizes the burden on the end-user while still 
supporting flexibility.
Such a compact detector descriptions cannot be interpreted in a 
general manner, therefore so called $Detector$ $Constructors$ are needed.

<img src="../LaTex/DD4hep_classes.png" height="400"/>
<b>Class diagram with the main classes and their relations 
             for the Generic Detector Description Model. The implementing
             ROOT classes are shown in brackets.
</b>


\section DETECTORS Detector Constructors

Detector Constructors are relatively small code fragments that get
as input an XML element from the compact description that represents 
a single detector instance. The code interprets the data and expands 
its geometry model in memory using the elements from the generic detector 
description model described in section~\ref{subsec:generic-model}.
The toolkit invokes these code fragments in a data driven way
using naming conventions during the initialization phase of the 
application. Users focus on one 
single detector type at the time, but the toolkit supports them to still
construct complex and large detector setups. 
Two implementations are currently supported: One is based on 
C++, which performs better and is able to detect errors at 
compiler time, but the code is slightly more technical.
The other is based on Python fragments, the code is more readable and
compact but errors are only detected at execution time.

The compact description together with the detector constructors are sufficient
to build the detector model and to visualize it. If during the lifetime of the
experiment the detector model changes, the corresponding constructors will 
need to be adapted accordingly. 
dd4hep provides already a palette of basic pre-implemented geometrical detector 
concepts to design experiments. In view of usage of dd4hep as a detector 
description toolkit, this library may in the future also adopt
generic designs of detector components created by end users e.g. during the design 
phase of future experiments.

<img src="../LaTex/DD4hep_compact_xml.png" height="250"/>

<b>An example sniplett of the compact detector description. The 
             example shows the description of a 2 layered silicon vertex 
             detector.
</b>

\section DETDESCMODEL Generic Detector Description Model

This is the heart of the dd4hep detector description toolkit. Its purpose is 
to build in memory a model of the detector including its geometrical aspects
as well as structural and functional aspects. The design reuses the elements 
from the ROOT geometry package and extends them in case required functionality 
is not available. The Figure above describing the detector model illustrates the main
players and their relationships.
Any detector is modeled as a tree of $Detector$ $Elements$, the entity 
central to this design, which is represented in the implementation by 
the $DetElement$ class. It offers all
applications a natural entry point to any detector part of the experiment
and represents a complete sub-detector (e.g. TPC), a part of a 
sub-detector (e.g. TPC-Endcap), a detector module or any other convenient 
detector device. 
The main purpose is to give access to the data associated 
to the detector device. For example, if the user writes some TPC reconstruction 
code, accessing the TPC detector element from this code will provide access 
the all TPC geometrical dimensions, the alignment and calibration constants 
and other slow varying conditions such as the gas pressure, end-plate 
temperatures etc. The $Detector$ $Element$ acts as a data concentrator. 
Applications may access the full experiment geometry and all connected data
through a singleton object called $Detector$, which provides 
management, bookkeeping and ownership to the model instances.

The geometry is implemented using the ROOT geometry classes, which are used
directly without unnecessary interfaces to isolate the end-user from the 
actual ROOT based implementation. There is one exception: 
The constructors are wrapped to facilitate a very compact and readable 
notation to end-users building custom $Detector$ $Constructors$.


\section MORE_INFO Still interested in more ?

<A name="UsefulLinks">Some useful Links</A>:

Here you can find the manuals:

- The basic <A href="../DD4hepManual.pdf">dd4hep manual</A>.
- The <A href="../DDG4Manual.pdf">DDG4 manual</A> to invoke the simulation toolkit Geant4 taking advantage of
  detector descriptions implemented in dd4hep.
- The DDAlign manual. A Geometry alignment toolkit to handle geometrical imperfections.
- The DDCond manual to handle detector conditions for dd4hep based deytector descriptions.
  (Under construction though).
- The <A href="../DDEveManual.pdf">DDEve manual</A> to visualize dd4hep geometries.
  (Under construction though).
- <A href="../DD4hep_Diagrams.pdf">UML diagrams</A> from the design phase
- <A href="../refman.pdf">Doxygen Manual</A> in pdf format
- <A href="../DD4hep_Tutorial.pdf">Tutorial</A>. Relatively old...
- <A href="http://cds.cern.ch/record/1473120/files/AIDA-D2_3.pdf">Design document</A>
- <A href="https://sft.its.cern.ch/jira/browse/DDFORHEP">dd4hep bug tracker</A>
.

CERN intra-web:
- dd4hep mails <A href="https://groups.cern.ch/group/DD4hep-developers/Lists/Archive/100.aspx">archive</A>.
- <A href="http://aidasoft.web.cern.ch/DD4hep">dd4hep AIDA software page</A>
.

Desy:
- <A href="https://svnsrv.desy.de/websvn/wsvn/General.aidasoft/DD4hep">Web svn</A>
.

Markus Frank CERN/LHCb

*/
